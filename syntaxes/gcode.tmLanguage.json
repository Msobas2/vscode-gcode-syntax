{
    "scopeName": "source.gcode",
    "name": "VSCode GCode Syntax",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#speedsfeeds"
        },
        {
            "include": "#prognumbers"
        },
        {
            "include": "#coords"
        },
        {
            "include": "#tools"
        },
        {
            "include": "#modifiers"
        },
        {
            "include": "#macrovars"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.gcode",
                    "match": "(\\(.+\\))"
                },
                {
                    "name": "comment.gcode",
                    "begin": ";",
                    "end": "\\n"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "[gG](1)?5[4-9](.1)?\\s?(P[0-9]{1,3})?",
                    "name": "constant.numeric.gcode"
                },
                {
                    "match": "[gG]1[1-2][0-9]",
                    "name": "constant.numeric.gcode"   
                },
                {
                    "match": "[gG]15\\s?(H[0-9]{1,2})?",
                    "name": "constant.numeric.gcode"
                },
                {
                    "match": "[gG][0-9]{1,3}(\\.[0-9])?",
                    "name": "markup.bold.gcode"
                },
                {
                    "match": "[mM][0-9]{1,3}",
                    "name": "keyword.operator.quantifier.regexp.gcode"
                },
                {
                    "match": "([\\%])",
                    "name": "string.gcode"
                },
                {
                    "match": "(GOTO)|(IF)|(EQ)|(NE)|(LT)|(GT)|(LE)|(GE)|(DO)|(WHILE)|(END)|(AND)|(OR)|(XOR)",
                    "name": "keyword.control.gcode"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "(SIN)|(COS)|(TAN)|(ASIN)|(ACOS)|(ATAN)|(FIX)|(FUP)|(LN)|(ROUND)|(SQRT)",

                    "name": "support.constant.math.gcode"
                },
                {
                    "match": "(FIX)|(FUP)|(ROUND)|(ABS)|(MOD)",
                    "name": "support.constant.math.gcode"
                },
                {
                    "match": "(\\+)|(\\*)|(\\/)|(\\*\\*)",
                    "name": "support.constant.math.gcode"
                },
                {
                    "match": "(\\-)",
                    "name": "invalid.gcode"
                }
            ]
        },
        "speedsfeeds": {
            "patterns": [
                {
                    "match": "([sS])(\\d+)?",
                    "name": "constant.language.gcode"
                },
                {
                    "match": "([eEfF])(\\d*\\.?\\d+\\.?)?",
                    "name": "constant.language.gcode"
                }
            ]
        },
        "prognumbers": {
            "patterns": [
                {
                    "match": "([nN])(\\d+)?",
                    "name": "constant.numeric.gcode"
                },
                {
                    "match": "([oO])(\\d+)?",
                    "name": "string.regexp.gcode"
                },
                {
                    "match": "([pP])(\\d+)?",
                    "name": "string.regexp.gcode"
                }
            ]
        },
        "coords": {
            "patterns": [
                {
                    "match": "([xX])(\\-?\\d?\\.?\\d+\\.?)?",
                    "name": "string.gcode"
                },
                {
                    "match": "([yY])(\\-?\\d?\\.?\\d+\\.?)?",
                    "name": "string.gcode"
                },
                {
                    "match": "([zZ])(\\-?\\d?\\.?\\d+\\.?)?",
                    "name": "invalid.gcode"
                },
                {
                    "match": "([aAbBcC])(\\-?\\d?\\.?\\d+\\.?)?",
                    "name": "constant.character.escape.gcode"
                }
            ]
        },
        "tools": {
            "patterns": [
                {
                    "match": "([dD])([0-9])*",
                    "name": "constant.character.gcode"
                },
                {
                    "match": "([hH])([0-9]*)",
                    "name": "constant.character.gcode"
                },
                {
                    "match": "([tT])([0-9]*)",
                    "name": "constant.character.gcode"
                }
            ]
        },
        "modifiers": {
            "patterns": [
                {
                    "match": "([iIjJkK])(\\-?\\d?\\.?\\d+\\.?)?",
                    "name": "constant.character.escape.gcode"
                },
                {
                    "match": "([qQrR])(\\-?\\d?\\.?\\d+\\.?)?",
                    "name": "support.constant.math.gcode"
                },
                {
                    "match": "([uUwW])(\\-?\\d?\\.?\\d+\\.?)?",
                    "name": "support.constant.math.gcode"
                }
            ]
        },
        "macrovars": {
            "patterns": [
                {
                    "match": "[#][0-9]+",
                    "name": "variable.other.gcode"
                },
                {
                    "match": "[#][\\[].+[\\]]",
                    "name": "variable.other.gcode"
                }
            ]
        }
    }

}